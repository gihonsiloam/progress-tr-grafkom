#include <windows.h>
#include <stdlib.h>
#include <gl/glut.h>

void init(void);
void tampil(void);
void mouse ( int button , int state , int x , int y);
void ukuran (int , int);
void mouseMotion(int x , int y);
void keyboard(unsigned char, int, int);

float xrot = 0.0f;
float yrot = 0.0f;
float xdiff = 0.0f;
float ydiff = 0.0f;
bool mouseDown = false;
int is_depth ;

int main (int argc, char **argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(800,600);
	glutInitWindowPosition(250,80);
	glutCreateWindow("3d");
	init();
	glutDisplayFunc(tampil);
	glutReshapeFunc(ukuran);
	glutKeyboardFunc(keyboard);
	glutMouseFunc(mouse);
	glutMotionFunc(mouseMotion);
	glutIdleFunc(tampil);
	glutMainLoop();
	return 0;
}

void keyboard(unsigned char key, int x, int y)
{
	switch (key)
	{
		
		case '5':
			if (is_depth)
			{
				is_depth = 0;
				glDisable(GL_DEPTH_TEST);
			}
			else
			{
				is_depth = 1;
				glEnable(GL_DEPTH_TEST);
			}
	}
	tampil();
}

void init(void)
{
	glClearColor (0.0, 0.0, 0.0, 1.0);
	glMatrixMode(GL_PROJECTION);
	glEnable(GL_COLOR_MATERIAL);
	glEnable(GL_DEPTH_TEST);
	is_depth=1;
	glMatrixMode(GL_MODELVIEW);
	glPointSize(9.0);
	glLineWidth(3.0f);
}

void tampil(void)
{
	
	if (is_depth)
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	else
	glClear(GL_COLOR_BUFFER_BIT);

	glLoadIdentity();
	gluLookAt(0.0f, 0.0f, 3.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f);
	glRotatef(xrot, 1.0f, 0.0f, 0.0f);
	glRotatef(yrot, 0.0f, 1.0f, 0.0f);
	glPushMatrix();
	
	//GARISSSSSSSSSSSSSSSS START
	glBegin(GL_LINE_LOOP);//kotak luar
	glColor3f(1.0, 1.0, 1.0);
	glVertex3f(-20.0, 0.3, 15.0);
	glVertex3f(-20.0, 0.3, -15.0);
	glVertex3f(20.0, 0.3, -15.0);
	glVertex3f(20.0, 0.3, 15.0);
	glEnd();
	
	glBegin(GL_LINE_LOOP);//kotak dalem
	glColor3f(1.0, 1.0, 1.0);
	glVertex3f(-5.0, 0.3, 5.0);
	glVertex3f(-5.0, 0.3, -5.0);
	glVertex3f(5.0, 0.3, -5.0);
	glVertex3f(5.0, 0.3, 5.0);
	glEnd();
	
	glBegin(GL_LINE_STRIP);//garis tengah
	glColor3f(1.0, 1.0, 1.0);
	glVertex3f(0.0, 0.3, -15.0);
	glVertex3f(0.0, 0.3, 15.0);
	glEnd();
	
	glBegin(GL_LINE_STRIP);//kotak pinalti kiri
	glColor3f(1.0, 1.0, 1.0);
	glVertex3f(-20.0, 0.3, -8.0);
	glVertex3f(-13.0, 0.3, -8.0);
	glVertex3f(-13.0, 0.3, 8.0);
	glVertex3f(-20.0, 0.3, 8.0);
	glEnd();
	
	glBegin(GL_LINE_STRIP);//kotak pinalti kanan
	glColor3f(1.0, 1.0, 1.0);
	glVertex3f(20.0, 0.3, -8.0);
	glVertex3f(13.0, 0.3, -8.0);
	glVertex3f(13.0, 0.3, 8.0);
	glVertex3f(20.0, 0.3, 8.0);
	glEnd();
	
	glBegin(GL_LINE_STRIP);//corner kiri1
	glColor3f(1.0, 1.0, 1.0);
	glVertex3f(-20.0, 0.3, -12.0);
	glVertex3f(-17.0, 0.3, -12.0);
	glVertex3f(-17.0, 0.3, -15.0);
	glEnd();
	
	glBegin(GL_LINE_STRIP);
	glColor3f(1.0, 1.0, 1.0);//corner kiri2
	glVertex3f(-20.0, 0.3, 12.0);
	glVertex3f(-17.0, 0.3, 12.0);
	glVertex3f(-17.0, 0.3, 15.0);
	glEnd();
	
	glBegin(GL_LINE_STRIP);//corner kanan1
	glColor3f(1.0, 1.0, 1.0);
	glVertex3f(17.0, 0.3, -15.0);
	glVertex3f(17.0, 0.3, -12.0);
	glVertex3f(20.0, 0.3, -12.0);
	glEnd();
	
	glBegin(GL_LINE_STRIP);//corner kanan2
	glColor3f(1.0, 1.0, 1.0);
	glVertex3f(20.0, 0.3, 12.0);
	glVertex3f(17.0, 0.3, 12.0);
	glVertex3f(17.0, 0.3, 15.0);
	glEnd();
	
	glBegin(GL_LINE_STRIP);//kotak penalti kecil depan kanan
	glColor3f(1.0, 1.0, 1.0);
	glVertex3f(13.0, 0.3, -2.0);
	glVertex3f(10.0, 0.3, -2.0);
	glVertex3f(10.0, 0.3, 2.0);
	glVertex3f(13.0, 0.3, 2.0);
	glEnd();

	glBegin(GL_LINE_STRIP);//kotak penalti kecil depan kiri
	glColor3f(1.0, 1.0, 1.0);
	glVertex3f(-13.0, 0.3, -2.0);
	glVertex3f(-10.0, 0.3, -2.0);
	glVertex3f(-10.0, 0.3, 2.0);
	glVertex3f(-13.0, 0.3, 2.0);
	glEnd();
	//END
	
	//FIELD START     
	
	glBegin(GL_POLYGON);//Lapangan dasar
	glColor3f(0.2, 0.8, 0.1);
	glVertex3f(-25.0, -0.15, 17.0);
	glVertex3f(-25.0, -0.15, -17.0);
	glVertex3f(-22.0, -0.15, -20.0);
	glVertex3f(22.0, -0.15, -20.0);
	glVertex3f(25.0, -0.15, -17.0);
	glVertex3f(25.0, -0.15, 17.0);
	glVertex3f(22.0, -0.15, 20.0);
	glVertex3f(-22.0, -0.15, 20.0);
	glEnd();
	                                                    
	glBegin(GL_POLYGON);//Lapangan dasar
	glColor3f(0.2, 0.6, 0.1);
	glVertex3f(-22.0, -0.1, 17.0);
	glVertex3f(-22.0, -0.1, -17.0);
	glVertex3f(22.0, -0.1, -17.0);
	glVertex3f(22.0, -0.1, 17.0);
	glEnd();
	
	glBegin(GL_POLYGON);//Lapangan dalam
	glColor3f(0.2, 0.8, 0.1);
	glVertex3f(-20.0, 0.0, 15.0);
	glVertex3f(-20.0, 0.0, -15.0);
	glVertex3f(20.0, 0.0, -15.0);
	glVertex3f(20.0, 0.0, 15.0);
	glEnd();
	
	glBegin(GL_POLYGON);//Belang rumput
	glColor3f(0.2, 0.6, 0.1);
	glVertex3f(-20.0, 0.1, 15.0);
	glVertex3f(-20.0, 0.1, 10.0);
	glVertex3f(20.0, 0.1, 10.0);
	glVertex3f(20.0, 0.1, 15.0);
	glEnd();
	glBegin(GL_POLYGON);
	glColor3f(0.2, 0.6, 0.1);
	glVertex3f(-20.0, 0.1, 5.0);
	glVertex3f(-20.0, 0.1, 0.0);
	glVertex3f(20.0, 0.1, 0.0);
	glVertex3f(20.0, 0.1, 5.0);
	glEnd();
	glBegin(GL_POLYGON);
	glColor3f(0.2, 0.6, 0.1);
	glVertex3f(-20.0, 0.1, -5.0);
	glVertex3f(-20.0, 0.1, -10.0);
	glVertex3f(20.0, 0.1, -10.0);
	glVertex3f(20.0, 0.1, -5.0);
	glEnd();
	//END
	
	//LANDASAN MIRING TRIBUN
	glBegin(GL_POLYGON);
	glColor3f(0.2, 0.1, 0.8);//depan
	glVertex3f(-30.0, 4.0, -30.0);
	glVertex3f(-22.0, -0.15, -20.0);
	glVertex3f(22.0, -0.15, -20.0);
	glVertex3f(30.0, 4.0, -30.0);
	glEnd();
	glBegin(GL_POLYGON);
	glColor3f(0.2, 0.1, 0.7);//depan-kanan
	glVertex3f(30.0, 4.0, -30.0);
	glVertex3f(22.0, -0.15, -20.0);
	glVertex3f(25.0, -0.15, -17.0);
	glVertex3f(35.0, 4.0, -25.0);
	glEnd();
	glBegin(GL_POLYGON);//kanan
	glColor3f(0.2, 0.1, 0.8);
	glVertex3f(35.0, 4.0, 25.0);
	glVertex3f(25.0, -0.15, 17.0);
	glVertex3f(25.0, -0.15, -17.0);
	glVertex3f(35.0, 4.0, -25.0);
	glEnd();
	glBegin(GL_POLYGON);//kanan-belakang
	glColor3f(0.2, 0.1, 0.7);
	glVertex3f(25.0, -0.15, 17.0);
	glVertex3f(35.0, 4.0, 25.0);
	glVertex3f(30.0, 4.0, 30.0);
	glVertex3f(22.0, -0.15, 20.0);
	glEnd();
	glBegin(GL_POLYGON);//belakang
	glColor3f(0.2, 0.1, 0.8);
	glVertex3f(-30.0, 4.0, 30.0);
	glVertex3f(-22.0, -0.15, 20.0);
	glVertex3f(22.0, -0.15, 20.0);
	glVertex3f(30.0, 4.0, 30.0);
	glEnd();
	glBegin(GL_POLYGON);//belakang-kiri
	glColor3f(0.2, 0.1, 0.7);
	glVertex3f(-22.0, -0.15, 20.0);
	glVertex3f(-30.0, 4.0, 30.0);
	glVertex3f(-35.0, 4.0, 25.0);
	glVertex3f(-25.0, -0.15, 17.0);
	glEnd();
	glBegin(GL_POLYGON);//kiri
	glColor3f(0.2, 0.1, 0.8);
	glVertex3f(-35.0, 4.0, 25.0);
	glVertex3f(-25.0, -0.15, 17.0);
	glVertex3f(-25.0, -0.15, -17.0);
	glVertex3f(-35.0, 4.0, -25.0);
	glEnd();
	glBegin(GL_POLYGON);//kiri-atas
	glColor3f(0.2, 0.1, 0.7);
	glVertex3f(-25.0, -0.15, -17.0);
	glVertex3f(-35.0, 4.0, -25.0);
	glVertex3f(-30.0, 4.0, -30.0);
	glVertex3f(-22.0, -0.15, -20.0);
	glEnd();
	
	//TEMBOK ATAS LANDASAN MIRING
	glBegin(GL_POLYGON);
	glColor3f(0.2, 0.1, 0.8);//depan
	glVertex3f(-30.0, 4.0, -30.0);
	glVertex3f(-30.0, 7.0, -30.0);
	glVertex3f(30.0, 7.0, -30.0);
	glVertex3f(30.0, 4.0, -30.0);
	glEnd();
	glBegin(GL_POLYGON);
	glColor3f(0.2, 0.1, 0.7);//depan-kanan
	glVertex3f(30.0, 4.0, -30.0);
	glVertex3f(30.0, 7.0, -30.0);
	glVertex3f(35.0, 7.0, -25.0);
	glVertex3f(35.0, 4.0, -25.0);
	glEnd();
	glBegin(GL_POLYGON);//kanan
	glColor3f(0.2, 0.1, 0.8);
	glVertex3f(35.0, 4.0, 25.0);
	glVertex3f(35.0, 7.0, 25.0);
	glVertex3f(35.0, 7.0, -25.0);
	glVertex3f(35.0, 4.0, -25.0);
	glEnd();
	glBegin(GL_POLYGON);//kanan-belakang
	glColor3f(0.2, 0.1, 0.7);
	glVertex3f(35.0, 7.0, 25.0);
	glVertex3f(35.0, 4.0, 25.0);
	glVertex3f(30.0, 4.0, 30.0);
	glVertex3f(30.0, 7.0, 30.0);
	glEnd();
	glBegin(GL_POLYGON);//belakang
	glColor3f(0.2, 0.1, 0.8);
	glVertex3f(-30.0, 4.0, 30.0);
	glVertex3f(-30.0, 7.0, 30.0);
	glVertex3f(30.0, 7.0, 30.0);
	glVertex3f(30.0, 4.0, 30.0);
	glEnd();
	glBegin(GL_POLYGON);//belakang-kiri
	glColor3f(0.2, 0.1, 0.7);
	glVertex3f(-30.0, 7.0, 30.0);
	glVertex3f(-30.0, 4.0, 30.0);
	glVertex3f(-35.0, 4.0, 25.0);
	glVertex3f(-35.0, 7.0, 25.0);
	glEnd();
	glBegin(GL_POLYGON);//kiri
	glColor3f(0.2, 0.1, 0.8);
	glVertex3f(-35.0, 4.0, 25.0);
	glVertex3f(-35.0, 7.0, 25.0);
	glVertex3f(-35.0, 7.0, -25.0);
	glVertex3f(-35.0, 4.0, -25.0);
	glEnd();
	glBegin(GL_POLYGON);//kiri-atas
	glColor3f(0.2, 0.1, 0.7);
	glVertex3f(-35.0, 7.0, -25.0);
	glVertex3f(-35.0, 4.0, -25.0);
	glVertex3f(-30.0, 4.0, -30.0);
	glVertex3f(-30.0, 7.0, -30.0);
	glEnd();
	

	glPopMatrix();
	glutSwapBuffers();
}

void idle()
{
	if (!mouseDown)
	{
		xrot += 0.3f;
		yrot += 0.4f;
	}
glutPostRedisplay();
}

void mouse(int button, int state, int x, int y)
{
	if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
	{
		mouseDown = true;
		xdiff = x - yrot;
		ydiff = -y + xrot;
        }
        else
        mouseDown = false;
}


void mouseMotion(int x, int y)
{
	if (mouseDown)
	
		{
			yrot = x - xdiff;	
			xrot = y + ydiff;
			
			glutPostRedisplay();
		}
}

void ukuran(int lebar, int tinggi)
{

	if(tinggi == 0) tinggi = 1;
	glMatrixMode(GL_PROJECTION);
	gluPerspective(50.0, lebar/tinggi, 5.0, 500.0);
	glTranslatef(0.0, -5.0, -150.0);
	glMatrixMode(GL_MODELVIEW);
}
